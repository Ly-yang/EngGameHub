# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: enggamehub
  labels:
    name: enggamehub
---
# ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: enggamehub-config
  namespace: enggamehub
data:
  NODE_ENV: "production"
  LOG_LEVEL: "info"
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  POSTGRES_HOST: "postgres-service"
  POSTGRES_PORT: "5432"
  POSTGRES_DB: "enggamehub"
  FRONTEND_URLS: "https://enggamehub.com,https://www.enggamehub.com"
  CORS_ORIGIN: "https://enggamehub.com,https://www.enggamehub.com"
---
# Secrets
apiVersion: v1
kind: Secret
metadata:
  name: enggamehub-secrets
  namespace: enggamehub
type: Opaque
stringData:
  DATABASE_URL: "postgresql://postgres:your_password@postgres-service:5432/enggamehub"
  POSTGRES_PASSWORD: "your_secure_postgres_password"
  REDIS_PASSWORD: "your_secure_redis_password"
  JWT_SECRET: "your-super-secret-jwt-key-change-in-production"
  OPENAI_API_KEY: "your_openai_api_key"
  AZURE_SPEECH_KEY: "your_azure_speech_key"
  AZURE_SPEECH_REGION: "eastus"
  ENCRYPTION_KEY: "your-32-character-encryption-key!"
  SMTP_USER: "your_smtp_user"
  SMTP_PASS: "your_smtp_password"
---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: enggamehub
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: enggamehub-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: enggamehub-secrets
              key: POSTGRES_PASSWORD
        - name: POSTGRES_INITDB_ARGS
          value: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
            - -d
            - enggamehub
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
            - -d
            - enggamehub
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: enggamehub
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP
---
# PostgreSQL PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: enggamehub
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: fast-ssd
---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: enggamehub
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --requirepass
        - $(REDIS_PASSWORD)
        - --appendonly
        - "yes"
        - --appendfsync
        - everysec
        - --maxmemory
        - 1gb
        - --maxmemory-policy
        - allkeys-lru
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: enggamehub-secrets
              key: REDIS_PASSWORD
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc
---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: enggamehub
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP
---
# Redis PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: enggamehub
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd
---
# EngGameHub Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: enggamehub-backend
  namespace: enggamehub
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: enggamehub-backend
  template:
    metadata:
      labels:
        app: enggamehub-backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "4000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: backend
        image: enggamehub/backend:latest
        ports:
        - containerPort: 4000
          name: http
        envFrom:
        - configMapRef:
            name: enggamehub-config
        - secretRef:
            name: enggamehub-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 4000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 4000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
        - name: uploads
          mountPath: /app/uploads
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      - name: uploads
        persistentVolumeClaim:
          claimName: uploads-pvc
      initContainers:
      - name: migrate
        image: enggamehub/backend:latest
        command: ["npx", "prisma", "migrate", "deploy"]
        envFrom:
        - configMapRef:
            name: enggamehub-config
        - secretRef:
            name: enggamehub-secrets
---
# EngGameHub Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: enggamehub-frontend
  namespace: enggamehub
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: enggamehub-frontend
  template:
    metadata:
      labels:
        app: enggamehub-frontend
    spec:
      containers:
      - name: frontend
        image: enggamehub/frontend:latest
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: NEXT_PUBLIC_API_URL
          value: "https://api.enggamehub.com"
        - name: NEXT_PUBLIC_WS_URL
          value: "wss://api.enggamehub.com"
        - name: NODE_ENV
          value: "production"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 2
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: next-cache
          mountPath: /.next
      volumes:
      - name: tmp
        emptyDir: {}
      - name: next-cache
        emptyDir: {}
---
# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: enggamehub-backend-service
  namespace: enggamehub
spec:
  selector:
    app: enggamehub-backend
  ports:
  - port: 80
    targetPort: 4000
    protocol: TCP
    name: http
  type: ClusterIP
---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: enggamehub-frontend-service
  namespace: enggamehub
spec:
  selector:
    app: enggamehub-frontend
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  type: ClusterIP
---
# Uploads PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: uploads-pvc
  namespace: enggamehub
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 50Gi
  storageClassName: nfs
---
# HPA for Backend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: enggamehub-backend-hpa
  namespace: enggamehub
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: enggamehub-backend
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
---
# HPA for Frontend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: enggamehub-frontend-hpa
  namespace: enggamehub
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: enggamehub-frontend
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: enggamehub-ingress
  namespace: enggamehub
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://enggamehub.com"
    nginx.ingress.kubernetes.io/websocket-services: "enggamehub-backend-service"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
spec:
  tls:
  - hosts:
    - enggamehub.com
    - www.enggamehub.com
    - api.enggamehub.com
    secretName: enggamehub-tls
  rules:
  - host: enggamehub.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: enggamehub-frontend-service
            port:
              number: 80
  - host: www.enggamehub.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: enggamehub-frontend-service
            port:
              number: 80
  - host: api.enggamehub.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: enggamehub-backend-service
            port:
              number: 80
---
# Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: enggamehub-network-policy
  namespace: enggamehub
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
  - from:
    - namespaceSelector:
        matchLabels:
          name: enggamehub
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: enggamehub
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
